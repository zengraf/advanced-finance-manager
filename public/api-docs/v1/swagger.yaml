openapi: 3.0.3

info:
  title: Advanced Finance Manager API
  version: 1.0.0

servers:
  - url: http://localhost:3001/

security:
  - bearerAuth: []

paths:
  /users:
    post:
      tags:
        - User
      security: []
      summary: Registers a user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    username:
                      type: string
                    email:
                      type: string
                      format: email
                    password:
                      type: string
                    password_confirmation:
                      type: string
      responses:
        201:
          description: Confirmation mail is sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        422:
          description: Request body is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      invalid_field_name:
                        type: array
                        items:
                          type: string
                          example: error message
    patch:
      tags:
        - User
      summary: Updates user info
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/User"
      responses:
        200:
          description: User info is changed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /users/confirmation:
    get:
      tags:
        - User
      summary: Confirms email
      security: [ ]
      parameters:
        - in: query
          name: confirmation_token
          required: true
      responses:
        '200':
          description: Successful confirmation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '422':
          description: Invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: array
                    items:
                      type: string
                      example: was already confirmed, please try signing in
  /users/sign_in:
    post:
      tags:
        - User
      security: []
      summary: Authenticates user and returns Bearer token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      format: email
                    password:
                      type: string
                      example: password
      responses:
        '201':
          description: User authenticated
          headers:
            authorization:
              description: Bearer JWT
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /users/sign_out:
    delete:
      tags:
        - User
      summary: De-authenticates user and revokes his token
      responses:
        '204':
          description: User de-authenticated
  /users/password:
    post:
      tags:
        - User
      summary: Sends email with password reset token
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      format: email
      responses:
        '201':
          description: Email with reset token was sent
          content:
            application/json:
              schema:
                type: object
        '422':
          description: Email does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      email:
                        type: array
                        items:
                          type: string
                          example: not found
    put:
      tags:
        - User
      summary: Resets password
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    reset_password_token:
                      type: string
                      example: token
                    password:
                      type: string
                      example: new password
      responses:
        '204':
          description: Password was changed and JWT token was revoked
        '422':
          description: Invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      reset_password_token:
                        type: array
                        items:
                          type: string
                          example: is invalid
  /transactions:
    get:
      tags:
        - Transactions
      summary: Returns list of transactions
      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
    post:
      tags:
        - Transactions
      summary: Creates new transaction
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                transaction:
                  type: object
                  properties:
                    amount:
                      type: number
                    date:
                      type: string
                      format: date
                    category_id:
                      type: integer
                    area_id:
                      type: integer
                    account_id:
                      type: integer
                    destination_account_id:
                      type: integer
                    destination_amount:
                      type: number
                    description:
                      type: string
      responses:
        '201':
          description: Transaction is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Request is invalid

  /accounts:
    get:
      tags:
        - Accounts
      summary: Returns list of accounts
      responses:
        '200':
          description: List of transactions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
    post:
      tags:
        - Accounts
      summary: Creates account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                account:
                  type: object
                  properties:
                    name:
                      type: string
                    amount:
                      type: integer
                    currency_id:
                      type: integer
      responses:
        201:
          description: Account is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        400:
          description: Request is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      invalid_field_name:
                        type: array
                        items:
                          type: string
                          example: error message
  /accounts/{id}:
    get:
      tags:
        - Accounts
      summary: Gets account
      parameters:
        - name: id
          in: path
          description: ID of account
          required: true
      responses:
        200:
          description: Account object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        404:
          description: Account does not exist or does not belong to user
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: Account does not exist or does not belong to user
    put:
      tags:
        - Accounts
      summary: Edits account
      parameters:
        - name: id
          in: path
          description: ID of account
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                account:
                  $ref: '#/components/schemas/Account'
      responses:
        202:
          description: Account is changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        404:
          description: Account does not exist or does not belong to user
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: Account does not exist or does not belong to user
    delete:
      tags:
        - Accounts
      summary: Deletes account
      parameters:
        - name: id
          in: path
          description: ID of account
          required: true
      responses:
        204:
          description: Account is deleted
        404:
          description: Account does not exist or does not belong to user
          content:
             application/json:
               schema:
                 type: object
                 properties:
                   errors:
                     type: array
                     items:
                       type: string
                       example: Account does not exist or does not belong to user
  /areas:
    get:
      tags:
        - Areas
      summary: Returns list of areas
      responses:
        '200':
          description: List of areas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Area'
    post:
      tags:
        - Areas
      summary: Creates area
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                account:
                  type: object
                  properties:
                    name:
                      type: string
                    amount:
                      type: integer
                    currency_id:
                      type: integer
      responses:
        201:
          description: Account is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Area'
        400:
          description: Request is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      invalid_field_name:
                        type: array
                        items:
                          type: string
                          example: error message
  /areas/{id}:
    get:
      tags:
        - Areas
      summary: Gets area
      parameters:
        - name: id
          in: path
          description: ID of area
          required: true
      responses:
        200:
          description: Area object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Area'
        404:
          description: Area does not exist or does not belong to user
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: Area does not exist or does not belong to user
    put:
      tags:
        - Areas
      summary: Edits area
      parameters:
        - name: id
          in: path
          description: ID of area
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                account:
                  $ref: '#/components/schemas/Account'
      responses:
        202:
          description: Area is changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        404:
          description: Area does not exist or does not belong to user
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: Area does not exist or does not belong to user
    delete:
      tags:
        - Areas
      summary: Deletes area
      parameters:
        - name: id
          in: path
          description: ID of area
          required: true
      responses:
        204:
          description: Area is deleted
        404:
          description: Area does not exist or does not belong to user
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
                      example: Area does not exist or does not belong to user

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Transaction:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        amount:
          type: number
          format: decimal
        date:
          type: string
          format: date
        category:
          $ref: '#/components/schemas/Category'
        area:
          $ref: '#/components/schemas/Area'
        account:
          $ref: '#/components/schemas/Account'
        destination_account:
          $ref: '#/components/schemas/Account'
        destination_amount:
          type: number
          format: decimal
        description:
          type: string
      required:
        - id
        - amount
        - category
        - area
        - account
    Account:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        amount:
          type: number
          format: decimal
          description: Account balance
        currency:
          $ref: '#/components/schemas/Currency'
      required:
        - id
        - name
        - amount
        - currency
    Area:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - id
        - name
    Category:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - id
        - name
    Currency:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: Zloty
        code:
          type: string
          example: PLN
        number:
          type: number
          example: 985
      required:
        - id
        - name
        - code
        - number
      readOnly: true
    User:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        avatar_url:
          type: string
  responses:
    UnauthorizedError:
      description: You are not authorized to perform this action